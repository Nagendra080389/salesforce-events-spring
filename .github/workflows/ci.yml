name: CI/CD Pipeline

# Trigger the workflow on push to main/master branch and pull requests
on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

  # Allow manual workflow dispatch
  workflow_dispatch:

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up JDK 11 (as specified in pom.xml)
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'

      # Cache Maven dependencies to speed up build
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Create proto directory if it doesn't exist (for protobuf generation)
      - name: Create proto directory
        run: mkdir -p src/main/proto

      # Note: Since pubsub_api.proto is already in the repo, no need to download it
      # But we'll verify it exists
      - name: Verify proto file exists
        run: |
          if [ ! -f "src/main/proto/pubsub_api.proto" ]; then
            echo "Warning: pubsub_api.proto not found. Build may fail."
            echo "Please ensure the proto file is committed to the repository."
          else
            echo "Proto file found successfully"
          fi

      # Clean any previous build artifacts
      - name: Clean previous builds
        run: mvn clean

      # Generate protobuf classes first
      - name: Generate protobuf classes
        run: mvn protobuf:compile protobuf:compile-custom

      # Run the main build and install
      - name: Build with Maven
        run: mvn clean install -DskipTests=false

      # Run tests explicitly (if not already covered by install)
      - name: Run tests
        run: mvn test

      # Package the application
      - name: Package application
        run: mvn package -DskipTests=true

      # Upload build artifacts (optional)
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v3
        with:
          name: salesforce-events-spring-jar
          path: target/*.jar
          retention-days: 30

  # Optional: Code quality checks
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Run Maven checkstyle (if configured)
      - name: Run checkstyle
        run: mvn checkstyle:check
        continue-on-error: true

      # Run Maven SpotBugs (if configured)
      - name: Run SpotBugs
        run: mvn spotbugs:check
        continue-on-error: true

  # Optional: Build Docker image (if you want to containerize)
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Download the JAR artifact from build job
      - name: Download JAR artifact
        uses: actions/download-artifact@v3
        with:
          name: salesforce-events-spring-jar
          path: target/

      # Build Docker image (requires Dockerfile)
      - name: Build Docker image
        run: |
          docker build -t salesforce-events-spring:latest .
          docker tag salesforce-events-spring:latest salesforce-events-spring:${{ github.sha }}
        if: hashFiles('Dockerfile') != ''

    # Optional: Push to registry (configure as needed)
    # - name: Push to Docker Registry
    #   run: |
    #     echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
    #     docker push salesforce-events-spring:latest
    #     docker push salesforce-events-spring:${{ github.sha }}

  # Notify on build completion
  notify:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [build, code-quality]
    if: always()

    steps:
      - name: Build Success Notification
        if: needs.build.result == 'success'
        run: echo "✅ Build completed successfully!"

      - name: Build Failure Notification
        if: needs.build.result == 'failure'
        run: echo "❌ Build failed! Please check the logs."